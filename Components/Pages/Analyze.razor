@using CarHaulingAnalytics.Data.Enums
@using EnumsNET
@using Radzen.Blazor.Rendering
@inherits AnalyzeRazor

@page "/analyze"

<PageTitle>State analysis</PageTitle>

<style type="text/css">
    .chart-container {
        height: 35vw;
        margin: 0 auto;
        border-radius: 10px;
        -webkit-box-shadow: 0 0 5px 0 #000000;
        -webkit-box-shadow: 0 0 5px 0 rgba(0,0,0,0.5);
        -moz-box-shadow: 0 0 5px 0 #000000;
        -moz-box-shadow: 0 0 5px 0 rgba(0,0,0,0.5);
        box-shadow: 0 0 5px 0 #000000;
        box-shadow: 0 0 5px 0 rgba(0,0,0,0.5);
    }

    .chart {
        width: 40vw;
    }

    .chart-sync {
        display: flex;
        flex-wrap: wrap;
        margin: 0 auto;
        padding: 5px;
        border-radius: 10px;
        -webkit-box-shadow: 0 0 5px 0 #000000;
        -webkit-box-shadow: 0 0 5px 0 rgba(0,0,0,0.5);
        -moz-box-shadow: 0 0 5px 0 #000000;
        -moz-box-shadow: 0 0 5px 0 rgba(0,0,0,0.5);
        box-shadow: 0 0 5px 0 #000000;
        box-shadow: 0 0 5px 0 rgba(0,0,0,0.5);
    }

    .ontop {
        position: -webkit-sticky;
        position: sticky;
        top: 0;
        font-size: 20px;
        z-index: 500;
    }
</style>

<div class="ontop">
    <RadzenCard>
        <RadzenButton @ref="Button" Icon="filter_alt" Text="Filters" Click="@(_ => Popup.ToggleAsync(Button.Element))" />
        <b>Displaying orders: $@FilterValue.LowerPriceLimit - $@FilterValue.UpperPriceLimit, @FilterValue.LowerRangeLimit mi - @FilterValue.UpperRangeLimit mi</b>
        @if (FilterValue.TrailerType.HasValue)
        {
            <b>, @FilterValue.TrailerType.Value.AsString() trailer</b>
        }
        @if (FilterValue is { FromDate: not null, ToDate: not null })
        {
            <b>, @FilterValue.FromDate.Value.ToString("dd/MM/yyyy") - @FilterValue.ToDate.Value.ToString("dd/MM/yyyy")</b>
        }
        <b>, @(FilterValue.SelectedState is null ? "No state selected" : FilterValue.SelectedState.Value.AsString()) </b>

    </RadzenCard>
</div>

<Popup @ref="Popup" Lazy="true" Style="display:none;position:absolute;height:300px;width:50vw;padding:5px;">
    <RadzenCard>
        @if (!FilterValue.FromDate.HasValue || !FilterValue.ToDate.HasValue)
        {
            <h5>@TotalOrders orders (last updated at @DatePickerDates.endDate UTC)</h5>
        }
        else
        {
            <h5>@TotalOrders orders from @FilterValue.FromDate.Value.ToString("dd/MM/yyyy") to @FilterValue.ToDate.Value.ToString("dd/MM/yyyy")</h5>
        }
        <RadzenRow Class="mb-3">
            <RadzenColumn Size="3">
                <h4>From date</h4>
                <RadzenDatePicker @bind-Value="@FilterValue.FromDate" Min="@DatePickerDates.startDate" Max="@DatePickerDates.endDate" AllowClear="true" DateFormat="dd/MM/yyyy" AllowInput="false" Placeholder="All dates" />
            </RadzenColumn>
            <RadzenColumn Size="3">
                <h4>To date</h4>
                <RadzenDatePicker @bind-Value="@FilterValue.ToDate" Min="@DatePickerDates.startDate" Max="@DatePickerDates.endDate" AllowClear="true" DateFormat="dd/MM/yyyy" AllowInput="false" Placeholder="All dates" />
            </RadzenColumn>
            <RadzenColumn Size="4">
                <h4>Platform filter</h4>
                <RadzenDropDown TValue="List<SourcePlatform>" @bind-Value="@FilterValue.SelectedPlatforms" Data="@(Enum.GetValues<SourcePlatform>())" Multiple="true" Chips="true" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Class="mb-3">
            <RadzenColumn Size="12">
                <h4>Price filter (from $@FilterValue.LowerPriceLimit to $@FilterValue.UpperPriceLimit)</h4>
                <RadzenNumeric Min="300" Max="7000" @bind-Value="@FilterValue.LowerPriceLimit" />
                <RadzenNumeric Min="300" Max="7000" @bind-Value="@FilterValue.UpperPriceLimit" />
            </RadzenColumn>

        </RadzenRow>
        <RadzenRow Class="mb-3">
            <RadzenColumn Size="12">
                <h4>Range filter (from @FilterValue.LowerRangeLimit mi to @FilterValue.UpperRangeLimit mi)</h4>
                <RadzenNumeric Min="0" Max="5000" @bind-Value="@FilterValue.LowerRangeLimit" />
                <RadzenNumeric Min="0" Max="5000" @bind-Value="@FilterValue.UpperRangeLimit" />
            </RadzenColumn>
        </RadzenRow>
        <RadzenRow Class="mb-3">
            <RadzenRow>
                <RadzenColumn>
                    <h4>Trailer type filter</h4>
                    <RadzenDropDown TValue="TrailerTypes?" @bind-Value="@FilterValue.TrailerType" Data="@(Enum.GetValues<TrailerTypes>())" AllowClear="true" Placeholder="Any trailer" />
                </RadzenColumn>
                <RadzenColumn>
                    <h4>Selected state</h4>
                    <RadzenDropDown TValue="States?" @bind-Value="@FilterValue.SelectedState" Data="@(Enum.GetValues<States>().Where(s => s != States.Canada))" AllowClear="true" Chips="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenRow>
        <RadzenRow>
            <RadzenColumn Size="5">
                <RadzenButton Text="Apply filter" Click="FilterChanged" IsBusy="!DatesLoaded" />
            </RadzenColumn>
        </RadzenRow>
    </RadzenCard>
</Popup>

@if (FilterValue.SelectedState.HasValue)
{
    <RadzenRow class="mt-2">
        <RadzenColumn>
            <div class="chart-sync" id="snapshotChart"></div>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow class="mt-3">
        <RadzenColumn Size="6">
            <div class="chart-container" id="priceCalendar">
            </div>
        </RadzenColumn>
        <RadzenColumn Size="6">
            <div class="chart-container" id="pricePerMileCalendar">
            </div>
        </RadzenColumn>
    </RadzenRow>
}

<script>
    function renderCalendarChart(containerId, data, title) {
        const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

        function generateChartData(data) {
            const firstWeekday = new Date(data[0].date).getDay(),
                monthLength = data.length,
                lastElement = data[monthLength - 1].date,
                lastWeekday = new Date(lastElement).getDay(),
                lengthOfWeek = 6,
                emptyTilesFirst = firstWeekday,
                chartData = [];
            
            for (let emptyDay = 0; emptyDay < emptyTilesFirst; emptyDay++) {
                chartData.push({
                    x: emptyDay,
                    y: 5,
                    value: null,
                    date: null,
                    custom: {
                        empty: true
                    }
                });
            }

            for (let day = 1; day <= monthLength; day++) {
                const date = data[day - 1].date;
                const xCoordinate = (emptyTilesFirst + day - 1) % 7;
                const yCoordinate = Math.floor((firstWeekday + day - 1) / 7);
                const id = day;
                const average = data[day - 1].average;

                chartData.push({
                    x: xCoordinate,
                    y: 5 - yCoordinate,
                    value: average,
                    date: new Date(date).getTime(),
                    custom: {
                        monthDay: id
                    }
                });
            }

            const emptyTilesLast = lengthOfWeek - lastWeekday;
            for (let emptyDay = 1; emptyDay <= emptyTilesLast; emptyDay++) {
                chartData.push({
                    x: (lastWeekday + emptyDay) % 7,
                    y: 0,
                    value: null,
                    date: null,
                    custom: {
                        empty: true
                    }
                });
            }
            return chartData;
        }
        const chartData = generateChartData(data);

        Highcharts.chart(containerId, {
            chart: {
                type: 'heatmap'
            },
            title: {
                text: title
            },
            accessibility: {
                enabled: false
            },
            tooltip: {
                enabled: true,
                outside: true,
                zIndex: 20,
                headerFormat: '',
                pointFormat: '{#unless point.custom.empty}{point.date:%A, %b %e, ' +
                    '%Y}{/unless}',
                nullFormat: 'No data'
            },
            xAxis: {
                categories: weekdays,
                opposite: true,
                lineWidth: 26,
                offset: 13,
                lineColor: 'rgba(27, 26, 37, 0.2)',
                labels: {
                    rotation: 0,
                    y: 20,
                    style: {
                        textTransform: 'uppercase',
                        fontWeight: 'bold'
                    }
                }
            },
            yAxis: {
                min: 0,
                max: 5,
                visible: false
            },
            legend: {
                visible: false
            },
            colorAxis: {
                min: 0,
                stops: [
                    [0.2, '#F9A05C'],
                    [0.4, '#F3E99E'],
                    [0.6, '#CBDFC8'],
                    [0.9, 'lightblue']
                ],
                labels: {
                    format: '${value}'
                }
            },
            series: [{
                keys: ['x', 'y', 'value', 'date', 'id'],
                data: chartData,
                nullColor: 'rgba(196, 196, 196, 0.2)',
                borderWidth: 2,
                borderColor: 'rgba(196, 196, 196, 0.2)',
                dataLabels: [{
                    enabled: true,
                    format: '${#unless point.custom.empty}{point.value:.1f}{/unless}',
                    style: {
                        textOutline: 'none',
                        fontWeight: 'normal',
                        fontSize: '1rem'
                    },
                    y: 4
                }, {
                    enabled: true,
                    align: 'left',
                    verticalAlign: 'top',
                    format: '{#unless ' +
                        'point.custom.empty}{point.custom.monthDay}{/unless}',
                    backgroundColor: 'whitesmoke',
                    padding: 2,
                    style: {
                        textOutline: 'none',
                        color: 'rgba(70, 70, 92, 1)',
                        fontSize: '0.8rem',
                        fontWeight: 'bold',
                        opacity: 0.5
                    },
                    x: 1,
                    y: 1
                }]
            }]
        });
    }

    function renderLinkedCharts(container, data) {
        ['mousemove', 'touchmove', 'touchstart'].forEach(function (eventType) {
            document.getElementById(container).addEventListener(
                eventType,
                function (e) {
                    let chart, point, i, event;
                    for (i = 0; i < Highcharts.charts.length-2; i = i + 1) {
                        chart = Highcharts.charts[i];
                        event = chart.pointer.normalize(e);
                        point = chart.series[0].searchPoint(event, true);

                        if (point) {
                            point.highlight(e);
                        }
                    }
                }
            );
        });

        Highcharts.Pointer.prototype.reset = function () {
            return undefined;
        };

        Highcharts.Point.prototype.highlight = function (event) {
            event = this.series.chart.pointer.normalize(event);
            this.onMouseOver();
            this.series.chart.tooltip.refresh(this);
            this.series.chart.xAxis[0].drawCrosshair(event, this);
        };

        function syncExtremes(e) {
            const thisChart = this.chart;

            if (e.trigger !== 'syncExtremes') {
                Highcharts.each(Highcharts.charts, function (chart) {
                    if (chart !== thisChart) {
                        if (chart.xAxis[0].setExtremes) {
                            chart.xAxis[0].setExtremes(
                                e.min,
                                e.max,
                                undefined,
                                false,
                                { trigger: 'syncExtremes' }
                            );
                        }
                    }
                });
            }
        }

        const activity = data;
        const xData = activity.xdata;
        document.getElementById(container).innerHTML = "";
        let counter = 0;
        activity.datasets.forEach(function (dataset, i) {
            counter++;
            dataset.data = Highcharts.map(dataset.data, function (val, j) {
                return [xData[j], val];
            });

            const chartDiv = document.createElement('div');
            chartDiv.className = 'chart';
            document.getElementById(container).appendChild(chartDiv);

            

            Highcharts.chart(chartDiv, {
                chart: {
                    marginLeft: 40,
                    spacingTop: 20,
                    spacingBottom: 20
                },
                accessibility: {
                    enabled: false
                },
                title: {
                    text: dataset.name,
                    margin: 0,
                    x: 30
                },
                credits: {
                    enabled: false
                },
                legend: {
                    enabled: false
                },
                xAxis: {
                    type: 'datetime',
                    crosshair: true,
                    events: {
                        setExtremes: syncExtremes
                    },
                    labels: {
                        format: '{value:%d %b}'
                    }
                },
                yAxis: {
                    title: {
                        text: null
                    }
                },
                tooltip: {
                    positioner: function () {
                        return {
                            x: this.chart.chartWidth - this.label.width,
                            y: 10
                        };
                    },
                    borderWidth: 0,
                    backgroundColor: 'none',
                    pointFormat: '{point.y}',
                    headerFormat: '',
                    shadow: false,
                    style: {
                        fontSize: '18px'
                    },
                    valueDecimals: dataset.valueDecimals,
                    valueSuffix: ' ' + dataset.unit
                },
                series: [{
                    data: dataset.data,
                    name: dataset.name,
                    type: dataset.type,
                    color: Highcharts.getOptions().colors[i],
                    fillOpacity: 0.3,
                    tooltip: {
                        valueSuffix: ' ' + dataset.unit
                    }
                }]
            });
        });
    }
</script>